{"version":3,"sources":["app/core.cljs"],"mappings":";AAaA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AACuBC,AACQC;AAEpC,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAACC;;AAEhB,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAAAC,AAACC,AAAoBJ;;AADvB,AAAA,AAGG,AAAA,AAAAG,AAAKH,AACH,AAAMK,AAAK,AAAA,AAAO,AAAA,AAAA,AAAAF,AAAQH;AAA1B,AAAA,AAAA,AAAAG,AACGE,AAAML;AAFX;;AAKH,AAAA,AAAOM;AAAP,AACE,AAAA,AAACC,AAAoBL,AAAc,AAAA,AAACM;;AAEtC,AAAA,AAAeC;AAAf,AAEE,AAACC,AACA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAUjB,AAAyBkB,AACpC,AAAKC;AAAL,AACE,AAACC,AAAMd,AACA,AAAKe;AAAL,AACE,AAAMF;AAAN,AACE,AAAA,AAACG,AAAMH,AACa,AAACI,AAAsB,AAAA,AAAcF,AAAWF;;AAFtE;;;AALZ,AAAA,AAAA;;AAUA,AAACP;;;AAEH;;;;;AAAA,AAAwBY;AAAxB,AAKE,AAACT","names":["app.core/routes","app.main/root","app.etc/pieces-page","js/app","js/app.core","js/app.core.match","app.core/match","reagent.core.atom","app.core/current-page","cljs.core/deref","cljs.core.println","view","app.core/render","reagent.dom.render","goog.dom/getElement","app.core/init","reitit.frontend.easy/start!","reitit.frontend.router","reitit.coercion.spec/coercion","new-match","cljs.core.swap_BANG_","old-match","cljs.core.assoc","reitit.frontend.controllers/apply-controllers","app.core/re-render"],"sourcesContent":["(ns app.core\n  (:require [reagent.dom]\n            [goog.dom :as gdom]\n            [reagent.core :as r]\n\n            [reitit.frontend :as rf]\n            [reitit.frontend.easy :as rfe]\n            [reitit.coercion.spec :as rss]\n            [reitit.frontend.controllers :as rfc]\n\n            [app.etc :refer [pieces-page]]\n            [app.main :refer [root]]))\n\n(def routes\n  [[\"/\" {:name ::root :view root}]\n   [\"/pieces\" {:name ::pieces :view pieces-page}]])\n\n(defonce match (r/atom nil))\n\n(defn current-page []\n  (println \"matchh? \" @match)\n  [:main\n   (if @match\n     (let [view (:view (:data @match))]\n       [view @match]))])\n\n\n(defn- render []\n  (reagent.dom/render [current-page] (gdom/getElement \"root\")))\n\n(defn ^:export init\n  []\n  (rfe/start!\n   (rf/router routes {:data {:coercion rss/coercion}})\n   (fn [new-match]\n     (swap! match\n            (fn [old-match]\n              (when new-match\n                (assoc new-match\n                       :controllers (rfc/apply-controllers (:controllers old-match) new-match))))))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment false})\n  (render))\n\n(defn- ^:dev/after-load re-render\n  \"The `:dev/after-load` metadata causes this function to be called after\n  shadow-cljs hot-reloads code. This function is called implicitly by its\n  annotation.\"\n  []\n  (init))\n\n"]}